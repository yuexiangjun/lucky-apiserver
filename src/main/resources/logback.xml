<?xml version="1.0" encoding="UTF-8"?>
<!--
scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。
当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。
默认值为false。
-->
<!--
Spring Boot官方推荐优先使用带有-spring的文件名作为你的日志配置（如使用logback-spring.xml，而不是logback.xml），
命名为logback-spring.xml的日志配置文件，spring boot可以为它添加一些spring boot特有的配置项。
上面是默认的命名规则，并且放在src/main/resources下面即可
如果你即想完全掌控日志配置，但又不想用logback.xml作为Logback配置的名字，可以通过logging.config属性指定自定义的名字

logging.config=classpath:logging-config.xml

虽然一般并不需要改变配置文件的名字，但是如果你想针对不同运行时Profile使用不同的日志配置，这个功能会很有用。
一般不需要这个属性，而是直接在logback-spring.xml中使用springProfile配置，不需要logging.config指定不同环境使用不同配置文件
-->
<configuration scan="true" scanPeriod="60 seconds" debug="true">
    <!--
    此base.xml 在springboot中，包含了default。
    Spring Boot的日志系统预先定义了一些系统变量：
    base.xml内容如下：
        <included>
            <include resource="org/springframework/boot/logging/logback/defaults.xml" />
            <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}/}spring.log}"/>
            <include resource="org/springframework/boot/logging/logback/console-appender.xml" />
            <include resource="org/springframework/boot/logging/logback/file-appender.xml" />
            <root level="INFO">
                <appender-ref ref="CONSOLE" />
                <appender-ref ref="FILE" />
            </root>
        </included>
        ${PID}，当前进程ID
        ${LOG_FILE}，Spring Boot配置文件中logging.file的值
        ${LOG_PATH}, Spring Boot配置文件中logging.path的值

        同时默认情况下包含另个appender——一个是控制台，一个是文件，
        分别定义在console-appender.xml和file-appender.xml中。
        同时对于应用的日志级别也可以通过application.properties进行定义

        logging.level.org.springframework.web=DEBUG
        logging.level.org.hibernate=ERROR
    -->
    <include resource="org/springframework/boot/logging/logback/base.xml"/>
    <!--
        设置变量： <property> 用来定义变量值的标签，<property> 有两个属性name和value；
        name: 变量的名称
        value: 的值时变量定义的值。
        通过<property>定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。
    -->
    <!-- 最大保存时间 15天-->
    <property name="maxHistory" value="15"/>
    <property name="maxFileSize" value="50MB"/>
    <property name="totalSizeCap" value="500MB"/>
    <property name="APP_NAME" value="log-kernel"/>
    <property name="log.path" value="./logs"/>

    <!--
        <timestamp>
        两个属性:
        key: 标识此<timestamp> 的名字；
        datePattern: 设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循java.txt.SimpleDateFormat的格式。
    -->
    <timestamp key="bySecond" datePattern="yyyyMMdd'T'HHmmss"/>

    <!--
        每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用设置成其他名字，
        用于区分不同应用程序的记录。一旦设置，不能修改,可以通过%contextName来打印日志上下文名称。
    -->
    <contextName>${APP_NAME}</contextName>
    <!--
        appender用来格式化日志输出节点，有俩个属性name和class，class用来指定哪种输出策略，常用就是控制台输出策略和文件输出策略。
        Logback使用appender来定义日志输出，在开发过程中最常用的是将日志输出到控制台
    -->
    <!--输出到控制台-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息
            ThresholdFilter为系统定义的拦截器，例如我们用ThresholdFilter来过滤掉ERROR级别以下的日志不输出到文件中。
            如果不用记得注释掉，不然你控制台会发现没日志~
        -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>info</level>
            <level>error</level>
        </filter>



        <!--
            encoder>表示对日志进行编码:
            %d{HH:mm:ss.SSS}——日志输出时间
            %thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用
            %-5level——日志级别，并且使用5个字符靠左对齐
            %logger{36}——日志输出者的名字
            %msg——日志消息
            %n——平台的换行符
        -->

        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId},%X{spanId}] %logger{50} - %msg%n
            </pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <root level="INFO">
        <appender-ref ref="FILE" />
    </root>
    <!--输出到文件
        另一种常见的日志输出到文件，随着应用的运行时间越来越长，日志也会增长的越来越多，将他们输出到同一个文件并非一个好办法。
        RollingFileAppender用于切分文件日志.其中重要的是rollingPolicy的定义
    -->
    <!-- DEBUG 日志 -->
<!--    <appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        &lt;!&ndash; 正在记录的日志文件的路径及文件名 &ndash;&gt;-->
<!--        <file>${log.path}/log_debug.log</file>-->
<!--        &lt;!&ndash;日志文件输出格式&ndash;&gt;-->
<!--        <encoder>-->
<!--            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>-->
<!--            <charset>UTF-8</charset> &lt;!&ndash; 设置字符集 &ndash;&gt;-->
<!--        </encoder>-->
<!--        &lt;!&ndash; 日志记录器的滚动策略，按日期，按大小记录 &ndash;&gt;-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
<!--            &lt;!&ndash; 日志归档 定义了日志的切分方式——把每一天的日志归档到一个文件中 &ndash;&gt;-->
<!--            <fileNamePattern>${log.path}/debug/log-debug-%d{yyyy-MM-dd}.%i.log</fileNamePattern>-->
<!--            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
<!--                <maxFileSize>${maxFileSize}</maxFileSize>-->
<!--            </timeBasedFileNamingAndTriggeringPolicy>-->
<!--            &lt;!&ndash;日志文件保留天数 表示只保留最近15天的日志，以防止日志填满整个磁盘空间&ndash;&gt;-->
<!--            <maxHistory>${maxHistory}</maxHistory>-->
<!--            &lt;!&ndash;<totalSizeCap>1GB</totalSizeCap>用来指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志&ndash;&gt;-->
<!--            <totalSizeCap>${totalSizeCap}</totalSizeCap>-->
<!--        </rollingPolicy>-->
<!--        &lt;!&ndash; 此日志文件只记录debug级别的 &ndash;&gt;-->
<!--        <filter class="ch.qos.logback.classic.filter.LevelFilter">-->
<!--            <level>debug</level>-->
<!--            <onMatch>ACCEPT</onMatch>-->
<!--            <onMismatch>DENY</onMismatch>-->
<!--        </filter>-->
<!--    </appender>-->

    <!--INFO 日志 -->
    <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}/log_info.log</file>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId},%X{spanId}] %logger{50} - %msg%n
            </pattern>
            <charset>UTF-8</charset>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/info/log-info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${maxFileSize}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>${maxHistory}</maxHistory>
            <totalSizeCap>${totalSizeCap}</totalSizeCap>
        </rollingPolicy>
<!--        <filter class="ch.qos.logback.classic.filter.LevelFilter">-->

<!--            <level>info</level>-->
<!--&lt;!&ndash;            <level>debug</level>&ndash;&gt;-->
<!--            <onMatch>ACCEPT</onMatch>-->
<!--            <onMismatch>DENY</onMismatch>-->
<!--        </filter>-->
    </appender>

<!--    &lt;!&ndash; WARN 日志 &ndash;&gt;-->
<!--    <appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        <file>${log.path}/log_warn.log</file>-->
<!--        <encoder>-->
<!--            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId},%X{spanId}] %logger{50} - %msg%n-->
<!--            </pattern>-->
<!--            <charset>UTF-8</charset>-->
<!--        </encoder>-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
<!--            <fileNamePattern>${log.path}/warn/log-warn-%d{yyyy-MM-dd}.%i.log</fileNamePattern>-->
<!--            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
<!--                <maxFileSize>${maxFileSize}</maxFileSize>-->
<!--            </timeBasedFileNamingAndTriggeringPolicy>-->
<!--            <maxHistory>${maxHistory}</maxHistory>-->
<!--            <totalSizeCap>${totalSizeCap}</totalSizeCap>-->
<!--        </rollingPolicy>-->
<!--        <filter class="ch.qos.logback.classic.filter.LevelFilter">-->
<!--            <level>warn</level>-->
<!--            <onMatch>ACCEPT</onMatch>-->
<!--            <onMismatch>DENY</onMismatch>-->
<!--        </filter>-->
<!--    </appender>-->


<!--    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        <file>${log.path}/log_info.log</file>-->
<!--        <encoder>-->
<!--            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId},%X{spanId}] %logger{50} - %msg%n-->
<!--            </pattern>-->
<!--            <charset>UTF-8</charset>-->
<!--        </encoder>-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
<!--            <fileNamePattern>${log.path}/error/log-error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>-->
<!--            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
<!--                <maxFileSize>${maxFileSize}</maxFileSize>-->
<!--            </timeBasedFileNamingAndTriggeringPolicy>-->
<!--            <maxHistory>${maxHistory}</maxHistory>-->
<!--            <totalSizeCap>${totalSizeCap}</totalSizeCap>-->
<!--        </rollingPolicy>-->
<!--        <filter class="ch.qos.logback.classic.filter.LevelFilter">-->
<!--            <level>ERROR</level>-->
<!--            <onMatch>ACCEPT</onMatch>-->
<!--            <onMismatch>DENY</onMismatch>-->
<!--        </filter>-->
<!--    </appender>-->
    <!--
        据不同环境（prod:生产环境，test:测试环境，dev:开发环境）来定义不同的日志输出，
        在 logback-spring.xml中使用 springProfile 节点来定义.
        application.properties增加环境选择的配置active: dev

        # 选择加载不同环境的配置文件 dev pre prod
        spring.profiles.active=dev
    -->
    <!--开发环境:打印控制台-->
    <springProfile name="public">
        <root level="info">
            <appender-ref ref="CONSOLE"/>
        </root>
    </springProfile>

    <!--生产环境:输出到文件-->
    <springProfile name="ss">
        <root level="info">
<!--            <appender-ref ref="DEBUG_FILE"/>-->
            <appender-ref ref="INFO_FILE"/>
<!--            <appender-ref ref="ERROR_FILE"/>-->
<!--            <appender-ref ref="WARN_FILE"/>-->
        </root>
    </springProfile>
    <!--
        <logger>
            用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。<loger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。
            name: 用来指定受此loger约束的某一个包或者具体的某一个类。
            level: 用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL和OFF，还有一个特俗值INHERITED或者同义词NULL`，代表强制执行上级的级别。 如果未设置此属性，那么当前loger将会继承上级的级别。
            addtivity: 是否向上级loger传递打印信息。默认是true。
    -->
    <!--
    <root>也是<loger>元素，但是它是根loger。只有一个level属性，应为已经被命名为"root".
    level: 用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
           不能设置为INHERITED或者同义词NULL。 默认是DEBUG。
    <loger>和<root>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger。
    -->
    <root level="info">
        <appender-ref ref="CONSOLE"/>
<!--        <appender-ref ref="DEBUG_FILE"/>-->
        <appender-ref ref="INFO_FILE"/>
<!--        <appender-ref ref="ERROR_FILE"/>-->
<!--        <appender-ref ref="WARN_FILE"/>-->
    </root>
    <!--
    带有loger的配置，不指定级别，不指定appender,<logger name="logback" />将控制logback包下的所有类的日志的打印，
    但是并没用设置打印级别，所以继承他的上级<root>的日志级别.没有设置addtivity，默认为true，
    将此loger的打印信息向上级传递； 没有设置appender，此loger本身不打印任何信息。
    当执行logback.LogbackDemo类的main方法时，因为LogbackDemo 在包logback中，所以首先执行<logger name="logback" />，将级别为“DEBUG”及大于“DEBUG”的日志信息传递给root，本身并不打印；
     root接到下级传递的信息，交给已经配置好的名为“STDOUT”的appender处理，“STDOUT”appender将信息打印到控制台；
    -->
    <!-- logback为java中的包 -->
    <logger name="logback"/>

    <!--
        <logger name="logback.LogbackDemo" level="INFO" additivity="false">控制logback.LogbackDemo类的日志打印，打印级别为“INFO”；
        additivity属性为false，表示此loger的打印信息不再向上级传递， 指定了名字为“STDOUT”的appender。
        当然如果你把additivity="false"改成additivity="true"的话，
        就会打印两次，因为打印信息向上级传递，logger本身打印一次，root接到后又打印一次。
    -->
    <!--logback.LogbackDemo：类的全路径 -->
    <logger name="logback.LogbackDemo" level="INFO" additivity="false">
        <appender-ref ref="CONSOLE"/>
    </logger>
</configuration>
